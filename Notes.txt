These are my raw text notes to document what I'm doing for the challenge.

## Azure Account Setup ##
-----------------------
Since I already have an Azure account from my AZ-900 days, I decided to use it.
I created 2 Management Groups under my Tenant Root Group, per the challenge's recommendation:
Cloud_Resume_Challenge_Dev_Test (for development)
    Azure subscription 1 (from when I studied AZ-900)
Cloud_Resume_Challenge_Prod (for when I deploy)
    Cloud_Resume_Challenge_Subscription (for when I deploy)

Additionally, I installed VScode, Azure Extensions, Azure CLI, Python3, and Azure Functions Core Tools. 

I initially had trouble logging in with "az login", but I was able to get it working using "az login --use-device-code."

## Chunk 0 ##
-----------
Since I already had AZ-900 from work, I can skip this step. 

## Chunk 1 ##
-----------
The purpose of Chunk 1 is to build a static website that will host my resume
in Azure Storage, accessible via HTTPS. 

HTML:
Since I already had a resume template that I liked (https://sheetsresume.com/resume-template/),
I figured I'd convert it into code. If I ever want to change the way my resume looks, I figure the automation
to be built later in this challenge will help make that process a lot easier. 

I don't pay for any AI chat bots, but I do have the free version of Grok avaiable to me via X;
I decided to upload the PDF of my anonymized resume to it and get it to spit out html and css for me.
Apparently PDF uploads are not available to free Grok users, so I took a screenshot of my resume and uploaded that instead.
It worked! Grok generated code that looked roughly like my current resume. 
I tested the code via CodPen (https://codepen.io/emzarts/pen/OXzmym), the website linked in the challenge docs.

Posting the Static Web Page:

Resources used:
https://learn.microsoft.com/en-us/azure/cdn/cdn-create-a-storage-account-with-cdn

I was able to get my resume site up using Azure CDN, at this endpoint: https://cdn-bhuegele-endpoint-1.azureedge.net/
The web page will require some edits, but it's 80% there.

DNS Record and Enabling HTTPS:

Endpoint: https://cdn-bhuegele-endpoint-1.azureedge.net
Hostname: https://bhuegeleteststorage.z13.web.core.windows.net

Using this article, I got my custom DNS record from CloudFlare to resolve to my CDN endpoint:
https://learn.microsoft.com/en-us/azure/cdn/cdn-map-content-to-custom-domain?tabs=dns-provider%2Cazure-portal%2Cazure-portal-cleanup
After fighting with CloudFlare for a minute, I realized that the way it displays 
the CNAME record information doesn't match the MS docs exactly!

I was able to add the custom domain www.skelingtonboi.com to my CDN endpoint! I chose to let the CDN
manage the certificate; according to the docs, it can take up to 24 hours to validate the custom domain.
When looking under the CDN endpoint, there is a status menu that appears with the validation steps after you enable HTTPS.
It only took about 30 minutes for my domain to be validated using Azure's DigiCert!

Now if you got to https://www.skelingtonboi.com you will see my static site/resume!

Reflection on Chunk 1:
----------------------
I believe I will change my approach to the content of my website, as I 
don't want to exercise bad OPSEC. Having said that, I know I'll tell a litte bit about myself
and give links to my LinkedIn, GitHub, etc. I'm sure I'll link to Credly for my certifications too. 

I chased a rabbit of getting my custom domain validated on my storage account, which I realized I didn't need
since the CDN endpoint would do the hard work. 

I'm glad that purchasing the Domain name from CloudFlare was easy, I just wish their webGUI for adding 
the records did a better job of conveying what it was doing.

## Chunk 2 ##
-------------
This part will be challenging for me, as I am a sysadmin by training and not a developer (especially not a web developer!).
Although step 7 is creating the Javascript code, apparently it's not done until Chunk 3, which confused me. 

The main purpose of this chunk is to build the backend API, so that's what I'll focus on.
Note: When creating a Cosmos DB "Table", you have to look under the "Other" tab when creating a new DB.

Azure Functions are very confusing, so I'm watching these videos:
https://www.youtube.com/watch?v=ieYrBWmkfno - A Cloud Guru
https://www.youtube.com/watch?v=lpZCwzYVNpA - John Savill

After doing some digging, I decided to go back to NoSQL for the DB, as it seems like folks on the forums
have had more luck with it and there was more documentation from what I could tell.

From what I've found, Microsoft's Azure docs tend to favor C# in a lot of cases, so I might re-factor the back end and use it.

Python Model V2 Azure Function Docs: https://techcommunity.microsoft.com/blog/azurecompute/azure-functions-v2-python-programming-model-is-generally-available/3827474
Useful code: https://github.com/Sasquatch8946/azure-resume/tree/main/backend/api

After a lot of rabbit chasing, I found that the code here was the most helpful: https://github.com/Sasquatch8946/azure-resume/tree/main/backend/api.
I built my function using the code referenced above, in a Python V2 HTTP Trigger Azure Function.
CoPilot helped me figure out my syntax issues when I customized the code.

Reflection on Chunk 2:
----------------------
I feel bad that I had to look at other folks' code to get my Azure Function working, but at the same time it felt great to get it working!
GoPilot helped me figure out my typos/syntax errors in the Python code, which was nice. 

I was very greatful for the video by A Cloud Guru; even though she was creating a C# function, I was still able to follow along and understand the end goal.
I made sure to add some comments in my code so that at least I understand what each piece was doing.

## Chunk 3 ##
-------------
Chunk 3 is all about hooking the backend and frontend together to make a working website!

It only took a few lines of code, as well as configuring the Azure Function CORS settings correctly.

From following A Cloud Guru's guide, I was able to get my functioning counter website working...but not at my domain.
Problem: If I go to the endpoint URL, the correct website appears (I had to restart the CDN endpoint). Having said that, 
the actual custom domain doesn't seem to have received the code changes that I've pushed (I can confirm this when I inspect the
source code).

This seemed to be the fix, purging CDN endpoint Cache: https://blog.atwork.at/post/Force-Azure-static-website-CDN-to-update#:~:text=The%20quick%20solution%20to%20force%20a%20content,the%20bottom%20pf%20the%20panel%20as%20here.

Reflection on Chunk 3:
----------------------
This chunk was a lot more work in the Azure Portal than I thought it would be, but A Cloud Guru came to the rescue yet again!
I was happy I was able to piece apart the problem regarding the CDN caching, as I knew that the hostname and endpoints in my CDN were working (just not the custom domain).
It feels great knowing I got the functioning website working, even if it (presently) doesn't look great!

## Chunk 4 ##
-------------
Because converting everything I've built by hand into Terraform scares me right now (lol), I chose to do the GitHub actions portion first.
After following A Cloud Guru's video, it occurred to me that I had to edit my frontend.main.yml workflow a bit to match the different folder stucture that
I opted to use. (My workflow was uploading the entire repo to $web, which we don't want!)
Once I removed the all the uneeded files from the storage account container (az storage blob delete-batch --account-name <storage account here> --source '$web' --auth-mode key), 
I was able to get the frontend pipeline to work correctly, yay!

Using Terraform to configure the main infrastructure has been pretty easy, but the main problems I'm facing are:
How to I get the Azure function to use the custom code made for this project?
How do I populate the CosmosDB container with the correct values?
How do I get the custom website code into the $web container?